1. we are using webpack as a bundler because we configure it through create-react-app

2. 
- npm install create-react-app
- npx create-react-app <app-name>

3. we have configured tailwind for create-react-app refering(https://tailwindcss.com/docs/guides/create-react-app)


4. after making some basic components with normal div lets setup the routing by installing `react-router-dom` -> `npm i -D react-router-dom`


5. so this way we will create the routes then
const appRouter = createBrowserRouter([
    {
        path: "/",
        element: <Login/>
    },
    {
        path: "/Browse",
        element: <Browse/>
    }
])

createBrowserRouter is from react-router-dom


6. then in return statement of body, instead of passing direct components we have to return RouteProvider like `<RouterProvider router={appRouter}/>`


7. Read about positioning in html, we have used absolute for header's logo image which will basically overlap with the image of login page


8. we gave gradient to the netflix logo


9. in login.js file we have made a issigninform state variable bec we want to know the state of form i.e. is it a sign in form or a sign up form

10. see how we made toggle feature on login file

11. see how we have added new input box based on toggle feature in login.js
{!isSignInForm && <input 
    type="Mobile Number" 
    placeholder="Mobile Number" 
    className="p-3 m-3 w-full bg-[#171716] rounded-lg border-[1px] border-slate-50"
/>}


12. Now i want to do the from validation, so one way is to to make hooks for every variable, another way is to pass the reference and we will see that using useRef hook, so what we will do is we will assign the null values to the email and password while declaring the variables then use that reference in our input boxes see login.js file


13. also to test submit form we have to stop the submit button action like this 
`onSubmit={(e) => {e.preventDefault()}}` so that we prevents the submit action


14. Now to show error message we have made a state variable which will store the message after validation


15. we are using firebase for authentication and to host our website
- npm install firebase
- npm install -g firebase-tools

to deploy
- You can deploy now or later. To deploy now, open a terminal window, then navigate to or create a root directory for your web app. Sign in to Google 
    firebase login

- Initiate your project
Run this command from your app's root directory:
    firebase init
(after firebase init it will ask for what you want to do so i have selected 
 ->Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys )
 -> Use an existing project
 -> Select a default Firebase project for this directory: netflixgpt-hh07 (NetflixGpt)
 -> What do you want to use as your public directory? build
 -> Configure as a single-page app (rewrite all urls to /index.html)? No
 -> Set up automatic builds and deploys with GitHub? No

- Then build your project
    npm run build
(this is the build we have selected after firebase init)

- When you're ready, deploy your web app
Put your static files (e.g., HTML, CSS, JS) in your app's deploy directory (the default is "public"). Then, run this command from your app's root directory:
    firebase deploy

After deploying, view your app at netflixgpt-hh07.web.app


16. lets do user authentication using firebase
ref - https://firebase.google.com/docs/auth/web/password-auth?hl=en&_gl=1*jqvv2e*_up*MQ..&gclid=CjwKCAjwx4O4BhAnEiwA42SbVBaiQONSP4j9SkgCqKZWLRg4xOCnChDQReYQ4fSolR8RZMDxPN2UnxoCxUUQAvD_BwE&gclsrc=aw.ds


17. Now if you see above link you will see that getAuth() is every where means at sign up and at sign in so lets write it at a central place


18. When we print a user while sign up inside createUserWithEmailAndPasswor we will see it gives accessToken with which user will be authenticated further


19. AFTER sign in and sign up start working, we get the user object so to access the user from anywhere i'll add my user object to redux store, so it means once my user is sign in or sign up i'll add that user object to my redux store(so that i can use the user info anywhere once the user is authenticated) and then we will navigate the user to browse page


20. so to setup the redux we will install the 2 libraries i.e.
- `npm i -D @reduxjs/toolkit`
- `npm i react-redux`


21. to create a store we make one file i.e. appStore.js in utils and in that we will do the configureStore of @reduxjs/toolkit which is a function which takes a configuration(a dictionary) which have a reducer key which have different reducers from different slices
`
import { configureStore } from "@reduxjs/toolkit";

const appStore = configureStore(
    {
        reducer: {}
    }
);

export default appStore;
`


22. now once we have a store lets create a slice i.e. userSlice.js file

`
import { createSlice } from "@reduxjs/toolkit";

const userSlice = createSlice({
    name: "user",
    initialState: null,
    reducers: {
        addUser: (state, action) => {
            return action.payload;
        },
        removeUser: (state, action) => {
            return null;
        }
    }
});


export const {addUser, removeUser} = userSlice.actions;

export default userSlice.reducer;
`

so here we will create a user slice with createSlice function of reduxjs/toolkit library, now here name key is the name of that user slice, then there is initialState which is the state when no reducers functions were called, then there is reducers which is basically a dispatch functions which will change the state, so we have wrote 2 dispatch functions i.e. addUser and removeUser

now at last we have exported the actions and userSlice.reducer

23. now we will import this userreducer inside my appStore and provide this userSlice inside my reducer like this 
`
reducer: {
    user: userReducer,
}
`

24. Now that we have configured our redux store now i have to provide this appStore to my app and we will provide it to the root of my app and it is at app.js and we will do it by wrapping our body inside provider like this
`
<Provider store={appStore}>
    <Body/>
</Provider>
`


25. now as soon as our user sign in or sign up we will update the redux store

26. now to add user to our store on sign in/up and remove user from our store on logout we have to dispatch our action that we can write inside createUserWithEmailAndPassword and signInWithEmailAndPassword on success but instead there is a function given by firebase itself we will use that to change our state i.e. onAuthStateChanged which will be called every time user signs in our sign out 

so we will write it inside our Body or at app.js level and we want it to be called once so we will use useEffect with [] like this
`
useEffect(() => {
        onAuthStateChanged(auth, (user) => {
            if(user) {
                // user is signed in
                const {uid, email, displayName} = user;
            }else{
                // user is signed out
            }
        });
    }, []);
`

now here we will dispatch the action to add or remove the user, so for that we will need the dispatch

const dispatch = useDispatch();

now we will use this dispatch hook to dispatch the action
`
useEffect(() => {
    onAuthStateChanged(auth, (user) => {
        if(user) {
            // user is signed in
            const {uid, email, displayName} = user;
            dispatch(addUser({uid, email, displayName}));
        }else{
            // user is signed out
            dispatch(removeUser());
        }
    });
}, []);
`

27. Now after this when user signs in we want it to redirect to browse page, so for this we will use useNavigate() hook to navigate sign in user to /browse, but this will gives an error

`
useEffect(() => {
    onAuthStateChanged(auth, (user) => {
        if(user) {
            // user is signed in
            const {uid, email, displayName} = user;
            dispatch(addUser({uid, email, displayName}));
            navigate("/browse");
        }else{
            // user is signed out
            dispatch(removeUser());
            navigate("/");
        }
    });
}, []);
`

now because of navigate there comes an issue because router bhi body level prr hai and we cant navigate from body level hame ya toh khi child mai likhna chahiye(jese browse, header, login.js file mai) tha ya toh router ko bahar nikal krr app.js level prr daalo

one solution is to use windows.href krke kuch hota hai 

aur another solution is to write navigate inside login.js file after login

28. now we have made the sign out feature in header file where if user signs out we navigate him to "/" page and for removing the user from redux our onAuthStateChanged func will take care

and with this we have signed in and signed out to our app and stored the user info into our redux store


29. now lets update the displayName also using firebase functions

`
if(!isSignInForm){
    // sign up form
    createUserWithEmailAndPassword(auth, email.current.value, password.current.value)
    .then((userCredential) => {
        // Signed up 
        const user = userCredential.user;

        updateProfile(user, {
            displayName: email.current.value.split("@")[0]
        }).then(()=>{
            // profile updated
            navigate("/browse");
        }).catch((error) => {
            // an error occurred
            setErrorMessage(error.message);
        })

        console.log(user);
        // navigate("/browse");
    })
    .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        setErrorMessage(errorCode + "-" + errorMessage);
    });
}else{
    // sign in form
    signInWithEmailAndPassword(auth, email.current.value, password.current.value)
    .then((userCredential) => {
        // Signed in 
        const user = userCredential.user;
        console.log(user);
        navigate("/browse");
    })
    .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        setErrorMessage(errorCode + "-" + errorMessage);
    });
}
`

this is how we have updated the displayname and once the displayname is set then we navigate it to browse page

we have also added the photo url, now how to add the photos using selector

so for this we will subscribe our header to the redux store by
`
const user = useSelector(store => store.user);
`

and with this user we will the access to the user slice